{"version":3,"sources":["components/Header.js","components/Title.js","components/CardList.js","App.js","index.js"],"names":["Header","state","answerResponse","score","this","setState","props","prevProps","className","topScore","Component","Title","CardList","children","CardListItem","styleImg","position","float","width","height","margin","backgroundPosition","backgroundRepeat","borderWidth","borderStyle","borderColor","backgroundSize","backgroundImage","src","style","onClick","handleClickFunction","data-value","id","key","App","guessedArr","curScore","curAnswerResponse","curCardArr","renderCards","cardArr","shuffleArray","array","i","length","j","Math","floor","random","temp","handleClick","event","gameOver","clickedKey","parseInt","target","getAttribute","forEach","element","restartGame","push","console","log","newScore","map","card","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09f20cb0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        answerResponse: \"\",\r\n        score: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            answerResponse: this.props.answerResponse,\r\n            score: this.props.score\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.score !== prevProps.score) {\r\n          this.setState({\r\n              score: this.props.score,\r\n              answerResponse: this.props.answerResponse\r\n          })\r\n        }\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <span className=\"navbar-brand mb-0 h1\">ClickyGame</span>\r\n                <span className=\"navbar-text\">\r\n                    {this.state.answerResponse}\r\n                </span>\r\n                <span className=\"navbar-text\">\r\n                    Score: {this.state.score} | Top Score: {this.props.topScore}\r\n                </span>\r\n            </nav>\r\n        )\r\n    };\r\n};\r\n\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nfunction Title() {\r\n    return(\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"display-4\">ClickyGame</h1>\r\n            <p className=\"lead\">Click an image to earn points, but don't click the same image more than once.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nexport function CardList({ children }) {\r\n    return (\r\n      <div className=\"container\">\r\n          {children}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export function CardListItem(props) {\r\n      const styleImg={\r\n        position: \"relative\",\r\n        float: \"left\",\r\n        width:  \"200px\",\r\n        height: \"300px\",\r\n        margin: \"10px\",\r\n        backgroundPosition: \"50% 50%\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        borderWidth: \"2px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"black\",\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: \"url(\" + props.src + \")\"\r\n      }\r\n    return <div style={styleImg} onClick={props.handleClickFunction} data-value={props.id} key={props.id}>\r\n      </div>\r\n  }\r\n\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Title from \"./components/Title\";\nimport { CardList, CardListItem } from \"./components/CardList\";\n\nclass App extends Component {\n    state = {\n        guessedArr: [],\n        topScore: 0,\n        curScore: 0,\n        curAnswerResponse: \"\",\n        curCardArr: [\n            {id: 1, src: \"./assets/images/photo1.jpg\"},\n            {id: 2, src: \"./assets/images/photo2.jpg\"},\n            {id: 3, src: \"./assets/images/photo3.jpg\"},\n            {id: 4, src: \"./assets/images/photo4.jpg\"},\n            {id: 5, src: \"./assets/images/photo5.jpg\"},\n            {id: 6, src: \"./assets/images/photo6.jpg\"},\n            {id: 7, src: \"./assets/images/photo7.jpg\"},\n            {id: 8, src: \"./assets/images/photo8.jpg\"},\n            {id: 9, src: \"./assets/images/photo9.jpg\"},\n            {id: 10, src: \"./assets/images/photo10.jpg\"},\n            {id: 11, src: \"./assets/images/photo11.jpg\"},\n            {id: 12, src: \"./assets/images/photo12.jpg\"},\n        ]\n    }\n    \n    componentDidMount() {\n        this.renderCards(this.state.curCardArr);\n        console.log(this.state);\n    }\n\n    renderCards = (cardArr) => {\n        this.setState(\n            {curCardArr: this.shuffleArray(cardArr)}\n        )\n    }\n\n    // Fisher-Yates shuffle: takes a random element from the entire array, puts it as the final spot in the array, and then repeats on the array minus the final spot, and so on until the first element in the array is set. \n    shuffleArray = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        };\n        return array\n    };\n\n    // click listener that increases \n    handleClick = event => {\n        let gameOver = false; \n        let clickedKey = parseInt(event.target.getAttribute(\"data-value\"));\n        this.state.guessedArr.forEach( element => {\n            if (clickedKey === element) {\n                gameOver = true;\n                return this.restartGame()\n            }\n        });\n        if (gameOver === false) {\n            this.state.guessedArr.push(clickedKey);\n            console.log(this.state);\n            let newScore = this.state.curScore + clickedKey\n            console.log(newScore)\n            this.setState({\n                curAnswerResponse: \"You guess correctly!\",\n                curScore: newScore\n            });\n            this.renderCards(this.state.curCardArr);\n        };\n    }\n\n    restartGame = () =>  {\n        console.log(\"restart game\")\n\n        if(this.state.curScore > this.state.topScore) {\n            this.setState({\n                topScore: this.state.curScore\n            });\n        };\n        this.setState({\n            guessedArr: [],\n            curScore: 0,\n            curAnswerResponse: \"You guessed incorrectly\"\n        });\n        this.renderCards(this.state.curCardArr);\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n            <div>\n                <Header key={this.state.curAnswerResponse} score={this.state.curScore} answerResponse={this.state.curAnswerResponse} topScore={this.state.topScore} />\n                <Title />\n                <CardList>\n                    {this.state.curCardArr.map(card => (\n                        <CardListItem id={card.id} src={card.src} key={card.id} handleClickFunction={this.handleClick}/>\n                        )\n                    )}\n                </CardList>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}